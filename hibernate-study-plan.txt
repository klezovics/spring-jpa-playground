1. Simple CRUD operations (see simpleentity package)

  1.1 Include spring-data & other DB related deps into pom.xml
  1.2 Create entity
    1.2.1 @Entity, @Table (optional)
    1.2.2 @Id
    1.2.3 @Column (optional)
  1.3 Create repository
    1.3.1 @Repository, extends CrudRepository<Type, Id>
  1.4 Configure datasource spring.datasource.(url|username|password)=XXX
  1.5 spring.jpa.show-sql=true to see SQL
  1.6 Create -> repository.save();
  1.7 Read -> repository.findById();
  1.8 Update -> read from DB, set fields, call repository.save()
  1.9 Delete -> repository.delete()
  1.10 repository.exists() -> check if element exists
  1.11 repository.count() -> returns the number of records
  1.12 And in general review all the methods, which come from CrudRepository

2. Generators - how does Hibernate/DB generate primary keys (see generator package)
  2.1 On the @Id field a @GeneratedValue(strategy=GenerationType.XXX) annotation is placed
  2.2 strategy=GenerationType.AUTO -> When you use the GenerationType.AUTO,
  Hibernate selects the generation strategy (from the ones below) based on the Hibernate dialect
  2.3 strategy=GenerationType.IDENTITY -> In the SQL schema the PRIMARY KEY attribute must be configured with auto-increment option
  2.4 strategy=GenerationType.SEQUENCE -> creates a sequence in DB and uses it to get primary key
  2.5 strategy=GenerationType.TABLE -> Uses a special table to store primary keys
  2.6 Read the details about each strategy in the source code for javax.persistence.GenerationType

3. Spring Data finder methods (see product package)
   OK, so if you need a finder method to query the data by a specific field, instead
   of implementing it, you can just give it a proper name and spring will generate the code
   for you.

   See full reference here: https://www.baeldung.com/spring-data-derived-queries

4. Paging and sorting (see product package)
   OK, so sometimes you want to read out your results in pages. Imagine you have 999999GB
   of data in a specific table. If you read it out all at once JVM will crash with OomError.
   Therefore, we read out the data in chunk. Each chunk is called a page. A page has a size
   and a number. You also want to sort your data by one or more fields.

   It is easy to do so with SpringData, just check this out:
   https://www.baeldung.com/spring-data-jpa-pagination-sorting

5. JPQL (see product package)
   Instead of writing ugly SQL queries you can write sexier JPQL queries.
   Its just syntactic sugar over SQL for java developers.
   You use the @Query annotation to do it

   https://www.baeldung.com/spring-data-jpa-query

6. Paging and sorting with JPQL (see product package)
   Look into the relevant chapters here:  https://www.baeldung.com/spring-data-jpa-query


7. Native SQL queries (see product package)
   You can also run native SQL queries instead of JPQL queries
   https://www.baeldung.com/spring-data-jpa-query#2-native

8. Inheritance mapping (see animal package)
  8.1 Single table -> base classes and all child classes go into single table, which contains all fields
  An extra diffirentiator column MUST be available to store the class, which was stored.

    8.1.1 @Inheritance, @DiscriminatorColumn, @DiscriminatorValue

  8.2 Table per class -> base class and subclasses must be stored each in a separate table
    8.2.1 @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)

  8.3 Joined -> Base fields are stored in base class table, child fields are stored in child tables
     8.2.2 @Inheritance(strategy = InheritanceType.JOINED), @PrimaryKeyJoinColumn(name="id")

  8.4 Extra info is here: https://www.baeldung.com/hibernate-inheritance


9. Component mapping (see animal package)
  Let's say you have an Employee class, which has-a Adress object inside.
  You want to store the Adress object's field values in the employee table.
  Basically, to flatten a nested object.

  @Embedded, @Embeddable


10. Relationships in Hibernate
    Our entities are connected to each other in Java, via having reference to each other.
    The same must be reflected in the DB. This is done using association mapping.

    10.1 @OneToMany
    10.2 @ManyToOne
    10.3 @ManyToMany
    10.4 @OneToOne

11. Hibernate caching mechanism
12. Transaction management
13. Save and retrieve files
14. Calling stored procedures
15. Working with MongoDB
16. Composite primary keys
17. Connect to multiple databases


== Bonus section ==

1. Loading initial schema and DB data with Spring Boot: https://www.baeldung.com/spring-boot-data-sql-and-schema-sql

