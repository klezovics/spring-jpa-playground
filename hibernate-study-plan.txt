1. Simple CRUD operations (see simpleentity package)

  1.1 Include spring-data & other DB related deps into pom.xml
  1.2 Create entity
    1.2.1 @Entity, @Table (optional)
    1.2.2 @Id
    1.2.3 @Column (optional)
  1.3 Create repository
    1.3.1 @Repository, extends CrudRepository<Type, Id>
  1.4 Configure datasource spring.datasource.(url|username|password)=XXX
  1.5 spring.jpa.show-sql=true to see SQL
  1.6 Create -> repository.save();
  1.7 Read -> repository.findById();
  1.8 Update -> read from DB, set fields, call repository.save()
  1.9 Delete -> repository.delete()
  1.10 repository.exists() -> check if element exists
  1.11 repository.count() -> returns the number of records
  1.12 And in general review all the methods, which come from CrudRepository

2. Generators - how does Hibernate/DB generate primary keys (see generator package)
  2.1 On the @Id field a @GeneratedValue(strategy=GenerationType.XXX) annotation is placed
  2.2 strategy=GenerationType.AUTO -> use one of the below strategies, Hibernate figures this out
  2.3 strategy=GenerationType.IDENTITY -> depends on PrimaryKey - auto-increment
  2.4 strategy=GenerationType.SEQUENCE -> creates a sequence in DB and uses it to get primary key
  2.5 strategy=GenerationType.TABLE -> Uses a special table to store primary keys

3. Spring Data finder methods
4. Paging and sorting
5. JPQL
6. Paging and sorting with JPQL
7. Native SQL queries
